#include "CalibrationTools.h"

void calibrateJets(const char* tag = "C0_", const char* singleRtag = "", const char* customMain = "", const char* ver=""){
  TString downloadC("Download.config"); //used for organizing the local work
  TString localC("Local.config"); //used for custom tree variables

  TString customMainS(customMain);
  TString mainC("");
  if(customMainS.EqualTo("")) mainC="Main.config"; //used as a template (to do--use to force a calibration)
  else mainC = customMain;
  
  TEnv* downloadE = new TEnv(downloadC);
  std::vector<TString> Rtags;
  TString singleRtagS(singleRtag);
  if(singleRtagS==""){
    Rtags = Vectorize(downloadE->GetValue("Rtags",""));
  }else{
    Rtags.push_back(singleRtagS);
  }
  
  TEnv* localE = new TEnv(localC); //directing the local calibration
  
  TEnv* mainE = new TEnv(mainC);
  TString jesS = mainE->GetValue("AbsoluteJES.CalibFile","JES.config");
  TEnv* jesE = new TEnv(jesS);
  //--Control Output
  bool doUncalibrated = localE->GetValue("doUncalibrated",0);
  bool doArea = localE->GetValue("doArea",0);
  bool doAreaResidual = localE->GetValue("doAreaResidual",0);
  bool doAreaResidualConst = localE->GetValue("doAreaResidualConst",0);
  bool doAreaResidualJES = localE->GetValue("doAreaResidualJES",0);
  bool useOriginCorrection = localE->GetValue("useOriginCorrection",1);

  TString verS(ver);
  TString Version = downloadE->GetValue("Version","VERSION");
  

  TString OutputFolder = localE->GetValue("OutputFolder","/tmp/alkire/CHOOSEANOUTPUTFOLDER");
  if(verS!=""){ Version = verS; OutputFolder = "/tmp/alkire/"+Version;}
  system(TString("mkdir "+OutputFolder+"/calibrated").Data());
  
  //--Calibration
  std::vector<TString> JetAlgos = Vectorize(localE->GetValue("JetAlgos","AntiKt4LCTopoJets AntiKt4EMTopoJets"));
  
  localE->Print();

  TString tagS = TString(tag);

  //rtag loop over files
  for(int r = 0; r < Rtags.size(); ++r){
    TFile * OutputFileF = new TFile(OutputFolder+"/calibrated/"+tagS+Rtags.at(r)+".root","recreate");

    double DefaultMuRef = mainE->GetValue("OffsetCorrection.DefaultMuRef", 0.);
    
    double DefaultNPVRef = mainE->GetValue("OffsetCorrection.DefaultNPVRef", 0.);
    double MuScaleFactor = mainE->GetValue("MuScaleFactor", 1.0);

    TString ResidualOffsetFileName(Version+Rtags.at(r));
    std::cout<<"Opening: "<<OutputFolder+"/residual/"+ResidualOffsetFileName+".config"<<std::endl;
    TEnv* residualE = new TEnv(OutputFolder+"/residual/"+ResidualOffsetFileName+".config");
    residualE->Print();
    //////

    TString InputFile = OutputFolder+"/"+Rtags.at(r)+".root"; //localE->GetValue("InputFile","CHOOSE AN INPUT FILE");
    TFile *InputFileF = new TFile(InputFile);
    
    TString CaloPt = localE->GetValue("CaloPt","");
    std::vector<float>* pt; 
    TString CaloEta = localE->GetValue("CaloEta","");
    std::vector<float>* eta;
    TString CaloPhi = localE->GetValue("CaloPhi","");
    std::vector<float>* phi;
    TString CaloE = localE->GetValue("CaloE","");
    std::vector<float>* e; 
    TString CaloM = localE->GetValue("CaloM","");
    std::vector<float>* m;
    
    TString TruePt = localE->GetValue("TruePt","");
    std::vector<float>* tpt; 
    TString TrueEta = localE->GetValue("TrueEta","");
    std::vector<float>* teta;
    TString TruePhi = localE->GetValue("TruePhi","");
    std::vector<float>* tphi;
    TString TrueE = localE->GetValue("TrueE","");
    std::vector<float>* te; 
    TString TrueM = localE->GetValue("TrueM","");
    std::vector<float>* tm;
    
    TString OrigPt = localE->GetValue("OrigPt","");
    std::vector<float>* opt; 
    TString OrigEta = localE->GetValue("OrigEta","");
    std::vector<float>* oeta;
    TString OrigPhi = localE->GetValue("OrigPhi","");
    std::vector<float>* ophi;
    TString OrigE = localE->GetValue("OrigE","");
    std::vector<float>* oe; 
    TString OrigM = localE->GetValue("OrigM","");
    std::vector<float>* om;
  
    TString CaloA = localE->GetValue("CaloA","");
    std::vector<float>* a;
    TString Mu = localE->GetValue("Mu","");
    float mu;
    TString NPV = localE->GetValue("NPV","");
    float npv;

    std::vector<TString> Rhos = Vectorize(localE->GetValue("Rho","RHO"));
    std::vector<TString> Tags = Vectorize(localE->GetValue("Tag","NONE"));
    std::vector<TString> JetRhos = Vectorize(localE->GetValue("JetRho",""));
    std::vector<TString> JetTags = Vectorize(localE->GetValue("JetTag",""));
    ReplaceNONEs(Rhos);
    ReplaceNONEs(Tags);
    
    //float rho;
    TString EventWeight = localE->GetValue("EventWeight","EW");
    float w;

    Long64_t Nevents = localE->GetValue("Nevents",0);
    Long64_t Offset = localE->GetValue("Offset",0);

    //OutputFileF->cd();
  
  
    for(int t = 0; t < JetAlgos.size(); ++t){
      
      TTree * tree = (TTree*)InputFileF->Get(JetAlgos.at(t));
      tree->GetListOfBranches()->Print();  
      Long64_t Nentry = Nevents > 0 ? Nevents : tree->GetEntries();
      
      if(CaloPt!=""){pt=0; tree->SetBranchAddress(CaloPt,&pt);}
      if(CaloEta!=""){eta=0; tree->SetBranchAddress(CaloEta,&eta);}
      if(CaloPhi!=""){phi=0; tree->SetBranchAddress(CaloPhi,&phi);}
      if(CaloE!=""){e=0; tree->SetBranchAddress(CaloE,&e);}  
      if(CaloM!=""){m=0; tree->SetBranchAddress(CaloM,&m);}
      if(CaloA!=""){a=0; tree->SetBranchAddress(CaloA,&a);}
    
      if(TruePt!=""){tpt=0; tree->SetBranchAddress(TruePt,&tpt);}
      if(TrueEta!=""){teta=0; tree->SetBranchAddress(TrueEta,&teta);}
      if(TruePhi!=""){tphi=0; tree->SetBranchAddress(TruePhi,&tphi);}
      if(TrueE!=""){te=0; tree->SetBranchAddress(TrueE,&te);}  
      if(TrueM!=""){tm=0; tree->SetBranchAddress(TrueM,&tm);}
    
      if(Mu!="") tree->SetBranchAddress(Mu,&mu);
      if(NPV!="") tree->SetBranchAddress(NPV,&npv);
      //if(Rho!="") tree->SetBranchAddress(Rho,&rho);
      if(EventWeight!="") tree->SetBranchAddress(EventWeight,&w);
      
      if(OrigPt!=""){opt=0; tree->SetBranchAddress(OrigPt,&opt);}
      if(OrigEta!=""){oeta=0; tree->SetBranchAddress(OrigEta,&oeta);}
      if(OrigPhi!=""){ophi=0; tree->SetBranchAddress(OrigPhi,&ophi);}
      if(OrigE!=""){oe=0; tree->SetBranchAddress(OrigE,&oe);}  
      if(OrigM!=""){om=0; tree->SetBranchAddress(OrigM,&om);}
      
      OutputFileF->cd();
      //TTree* UncalibratedT, AreaT, AreaResidualT, AreaResidualJEST;
    
      
      TTree* event = new TTree("Event"+JetAlgos.at(t),"Event variables for "+JetAlgos.at(t));
      event->Branch("mu",&mu,"mu/F");
      event->Branch("npv",&npv,"npv/F");
      //event->Branch("rho",&rho,"rho/F");
      event->Branch("w",&w,"w/F");
    
      LoTree* UncalibratedL = 0;
      std::vector<LoTree*> AreaL;
      std::vector<LoTree*> AreaResidualL;
      std::vector<LoTree*> AreaResidualConstL;
      std::vector<LoTree*> AreaResidualJESL;
      if(doUncalibrated) UncalibratedL = new LoTree(new TTree(JetAlgos.at(t)+"Uncalibrated",JetAlgos.at(t)+"Uncalibrated"));

      
      float rho[Rhos.size()];
      std::vector<float>* jetrho[JetRhos.size()];
      for(int i = 0 ; i < JetRhos.size(); ++i) jetrho[i] = 0;

      std::vector<TAxis *> AbsEtaBinsAxis;
      std::vector<TAxis *> ConstTermAbsEtaBinsAxis;
      std::vector< std::vector<double> > NPVTerm;
      std::vector< std::vector<double> > MuTerm;
      std::vector< std::vector<double> > ConstTerm;
      
      for(int i = 0; i < Rhos.size(); ++i){
	if(doArea) AreaL.push_back(new LoTree(new TTree(JetAlgos.at(t)+Tags.at(i)+"Area",JetAlgos.at(t)+Tags.at(i)+"Area")));    
	if(doAreaResidual) AreaResidualL.push_back(new LoTree(new TTree(JetAlgos.at(t)+Tags.at(i)+"AreaResidual",JetAlgos.at(t)+Tags.at(i)+"AreaResidual")));
	if(doAreaResidualConst) AreaResidualConstL.push_back(new LoTree(new TTree(JetAlgos.at(t)+Tags.at(i)+"AreaResidualConst",JetAlgos.at(t)+Tags.at(i)+"AreaResidualConst")));
	if(doAreaResidualJES) AreaResidualJESL.push_back(new LoTree(new TTree(JetAlgos.at(t)+Tags.at(i)+"AreaResidualJES",JetAlgos.at(t)+Tags.at(i)+"AreaResidualJES")));
	if(Rhos.at(i)!="0") {
	  tree->SetBranchAddress(Rhos.at(i),&rho[i]);
	  event->Branch(Rhos.at(i),&rho[i],Rhos.at(i)+"/F");
	}
	else rho[i] = 0;
	
	TString ResidualOffsetName(Tags.at(i)+Version+Rtags.at(r)+JetAlgos.at(t));
	
	std::vector<double> AbsEtaBins = VectorizeD(residualE->GetValue(ResidualOffsetName+".AbsEtaBins","0 4.5"));
	AbsEtaBinsAxis.push_back(new TAxis(AbsEtaBins.size()-1,&AbsEtaBins[0]));
	
	std::vector<double> ConstTermAbsEtaBins = VectorizeD(residualE->GetValue(ResidualOffsetName+".ConstTermAbsEtaBins","0 4.5"));
	ConstTermAbsEtaBinsAxis.push_back(new TAxis(ConstTermAbsEtaBins.size()-1,&ConstTermAbsEtaBins[0]));
	NPVTerm.push_back( VectorizeD(residualE->GetValue(ResidualOffsetName+".NPVTerm."+JetAlgos.at(t),"0 0 0 0 0"))); 
	MuTerm.push_back( VectorizeD(residualE->GetValue(ResidualOffsetName+".MuTerm."+JetAlgos.at(t),"0 0 0 0 0"))); 
	ConstTerm.push_back( VectorizeD(residualE->GetValue(ResidualOffsetName+".ConstTerm."+JetAlgos.at(t),"0 0 0 0 0"))); 
      }
      //
      std::vector<TAxis *> jetAbsEtaBinsAxis;
      std::vector<TAxis *> jetConstTermAbsEtaBinsAxis;
      std::vector< std::vector<double> > jetNPVTerm;
      std::vector< std::vector<double> > jetMuTerm;
      std::vector< std::vector<double> > jetConstTerm;
      
      for(int i = 0; i < JetRhos.size(); ++i){
	if(doArea) AreaL.push_back(new LoTree(new TTree(JetAlgos.at(t)+JetTags.at(i)+"Area",JetAlgos.at(t)+JetTags.at(i)+"Area")));    
	if(doAreaResidual) AreaResidualL.push_back(new LoTree(new TTree(JetAlgos.at(t)+JetTags.at(i)+"AreaResidual",JetAlgos.at(t)+JetTags.at(i)+"AreaResidual")));
	if(doAreaResidualConst) AreaResidualConstL.push_back(new LoTree(new TTree(JetAlgos.at(t)+JetTags.at(i)+"AreaResidualConst",JetAlgos.at(t)+JetTags.at(i)+"AreaResidualConst")));
	if(doAreaResidualJES) AreaResidualJESL.push_back(new LoTree(new TTree(JetAlgos.at(t)+JetTags.at(i)+"AreaResidualJES",JetAlgos.at(t)+JetTags.at(i)+"AreaResidualJES")));
	
	tree->SetBranchAddress(JetRhos.at(i),&jetrho[i]);
	
	TString ResidualOffsetName(JetTags.at(i)+Version+Rtags.at(r)+JetAlgos.at(t));
	std::vector<double> AbsEtaBins = VectorizeD(residualE->GetValue(ResidualOffsetName+".AbsEtaBins","0 4.5"));
	jetAbsEtaBinsAxis.push_back(new TAxis(AbsEtaBins.size()-1,&AbsEtaBins[0]));
	
	std::vector<double> ConstTermAbsEtaBins = VectorizeD(residualE->GetValue(ResidualOffsetName+".ConstTermAbsEtaBins","0 4.5"));
	jetConstTermAbsEtaBinsAxis.push_back(new TAxis(ConstTermAbsEtaBins.size()-1,&ConstTermAbsEtaBins[0]));
	jetNPVTerm.push_back( VectorizeD(residualE->GetValue(ResidualOffsetName+".NPVTerm."+JetAlgos.at(t),"0 0 0 0 0"))); 
	jetMuTerm.push_back( VectorizeD(residualE->GetValue(ResidualOffsetName+".MuTerm."+JetAlgos.at(t),"0 0 0 0 0"))); 
	jetConstTerm.push_back( VectorizeD(residualE->GetValue(ResidualOffsetName+".ConstTerm."+JetAlgos.at(t),"0 0 0 0 0"))); 
	
      }
      //



      for(Long64_t i = 0; i < Nentry; ++i){
	
	tree->GetEntry(i+Offset);
	for(int j = 0; j < e->size(); ++j){
	  TLorentzVector jet_calo;
	  TLorentzVector jet_orig;
	  TLorentzVector jet_area;
	  TLorentzVector jet_residual;
	  TLorentzVector jet_JES;
	
	  jet_calo.SetPtEtaPhiE(pt->at(j),eta->at(j),phi->at(j),e->at(j));
	  if(OrigE!="") jet_orig.SetPtEtaPhiE(opt->at(j),oeta->at(j),ophi->at(j),oe->at(j));
	
	  if(doUncalibrated){
	    if(CaloPt!="") UncalibratedL->pt.push_back(pt->at(j));
	    if(CaloEta!="") UncalibratedL->eta.push_back(eta->at(j));
	    if(CaloPhi!="") UncalibratedL->phi.push_back(phi->at(j));
	    if(CaloE!="") UncalibratedL->e.push_back(e->at(j));
	    if(CaloM!="") UncalibratedL->m.push_back(m->at(j));

	    if(TruePt!="") UncalibratedL->tpt.push_back(tpt->at(j));
	    if(TrueEta!="") UncalibratedL->teta.push_back(teta->at(j));
	    if(TruePhi!="") UncalibratedL->tphi.push_back(tphi->at(j));
	    if(TrueE!="") UncalibratedL->te.push_back(te->at(j));
	    if(TrueM!="") UncalibratedL->tm.push_back(tm->at(j));

	    if(EventWeight!="") UncalibratedL->EW = w;
	  }
	  
	  for(int r = 0; r < Rhos.size(); ++r){
	    
	    if(doArea){//add rho
	      float area_pt, area_eta, area_phi, area_e, area_m;
	      
	      JetPileupCorrection(area_pt,area_eta,area_phi,area_e,area_m,jet_calo,useOriginCorrection ? jet_orig : jet_calo,a->at(j),rho[r],0.,true);
	      AreaL.at(r)->pt.push_back(area_pt);
	      AreaL.at(r)->eta.push_back(area_eta);
	      AreaL.at(r)->phi.push_back(area_phi);
	      AreaL.at(r)->e.push_back(area_e);
	      AreaL.at(r)->m.push_back(jet_area.M());

	      if(TruePt!="") AreaL.at(r)->tpt.push_back(tpt->at(j));
	      if(TrueEta!="") AreaL.at(r)->teta.push_back(teta->at(j));
	      if(TruePhi!="") AreaL.at(r)->tphi.push_back(tphi->at(j));
	      if(TrueE!="") AreaL.at(r)->te.push_back(te->at(j));
	      if(TrueM!="") AreaL.at(r)->tm.push_back(tm->at(j));
	      if(EventWeight!="") AreaL.at(r)->EW = w;
	    }
	    if(doAreaResidual){//add rho
	      float area_pt, area_eta, area_phi, area_e, area_m;
	      float residualoffset = GetResidualOffset(useOriginCorrection ? fabs(jet_orig.Eta()) : fabs(jet_calo.Eta()),mu,npv,DefaultMuRef,DefaultNPVRef,MuTerm.at(r),NPVTerm.at(r),AbsEtaBinsAxis.at(r));
	      JetPileupCorrection(area_pt,area_eta,area_phi,area_e,area_m,jet_calo,useOriginCorrection ? jet_orig : jet_calo,a->at(j),rho[r],residualoffset,true);
	      AreaResidualL.at(r)->pt.push_back(area_pt);
	      AreaResidualL.at(r)->eta.push_back(area_eta);
	      AreaResidualL.at(r)->phi.push_back(area_phi);
	      AreaResidualL.at(r)->e.push_back(area_e);
	      AreaResidualL.at(r)->m.push_back(jet_area.M());

	      if(TruePt!="") AreaResidualL.at(r)->tpt.push_back(tpt->at(j));
	      if(TrueEta!="") AreaResidualL.at(r)->teta.push_back(teta->at(j));
	      if(TruePhi!="") AreaResidualL.at(r)->tphi.push_back(tphi->at(j));
	      if(TrueE!="") AreaResidualL.at(r)->te.push_back(te->at(j));
	      if(TrueM!="") AreaResidualL.at(r)->tm.push_back(tm->at(j));
	      
	      if(EventWeight!="") AreaResidualL.at(r)->EW = w;
	    }
	    if(doAreaResidualConst){//add rho
	      float area_pt, area_eta, area_phi, area_e, area_m;
	      float residualoffset = GetResidualOffset(useOriginCorrection ? fabs(jet_orig.Eta()) : fabs(jet_calo.Eta()),mu,npv,DefaultMuRef,DefaultNPVRef,MuTerm.at(r),NPVTerm.at(r),AbsEtaBinsAxis.at(r));
	      float constoffset = GetConstOffset(useOriginCorrection ? fabs(jet_orig.Eta()) : fabs(jet_calo.Eta()),ConstTerm.at(r),ConstTermAbsEtaBinsAxis.at(r));
	      JetPileupCorrection(area_pt,area_eta,area_phi,area_e,area_m,jet_calo,useOriginCorrection ? jet_orig : jet_calo,a->at(j),rho[r],residualoffset+constoffset,true);
	      AreaResidualConstL.at(r)->pt.push_back(area_pt);
	      AreaResidualConstL.at(r)->eta.push_back(area_eta);
	      AreaResidualConstL.at(r)->phi.push_back(area_phi);
	      AreaResidualConstL.at(r)->e.push_back(area_e);
	      AreaResidualConstL.at(r)->m.push_back(jet_area.M());
	      
	      if(TruePt!="") AreaResidualConstL.at(r)->tpt.push_back(tpt->at(j));
	      if(TrueEta!="") AreaResidualConstL.at(r)->teta.push_back(teta->at(j));
	      if(TruePhi!="") AreaResidualConstL.at(r)->tphi.push_back(tphi->at(j));
	      if(TrueE!="") AreaResidualConstL.at(r)->te.push_back(te->at(j));
	      if(TrueM!="") AreaResidualConstL.at(r)->tm.push_back(tm->at(j));
	      if(EventWeight!="") AreaResidualConstL.at(r)->EW = w;
	      
	    }
	  }
	  for(int r = 0; r < JetRhos.size(); ++r){
	    if(doArea){//add rho
	      float area_pt, area_eta, area_phi, area_e, area_m;
	      
	      JetPileupCorrection(area_pt,area_eta,area_phi,area_e,area_m,jet_calo,useOriginCorrection ? jet_orig : jet_calo,a->at(j),jetrho[r]->at(j),0.,true);
	      AreaL.at(Rhos.size()+r)->pt.push_back(area_pt);
	      AreaL.at(Rhos.size()+r)->eta.push_back(area_eta);
	      AreaL.at(Rhos.size()+r)->phi.push_back(area_phi);
	      AreaL.at(Rhos.size()+r)->e.push_back(area_e);
	      AreaL.at(Rhos.size()+r)->m.push_back(jet_area.M());
	      
	      if(TruePt!="") AreaL.at(Rhos.size()+r)->tpt.push_back(tpt->at(j));
	      if(TrueEta!="") AreaL.at(Rhos.size()+r)->teta.push_back(teta->at(j));
	      if(TruePhi!="") AreaL.at(Rhos.size()+r)->tphi.push_back(tphi->at(j));
	      if(TrueE!="") AreaL.at(Rhos.size()+r)->te.push_back(te->at(j));
	      if(TrueM!="") AreaL.at(Rhos.size()+r)->tm.push_back(tm->at(j));
	      if(EventWeight!="") AreaL.at(Rhos.size()+r)->EW = w;
	  
	    }
	    if(doAreaResidual){//add rho
	      float area_pt, area_eta, area_phi, area_e, area_m;
	      float residualoffset = GetResidualOffset(useOriginCorrection ? fabs(jet_orig.Eta()) : fabs(jet_calo.Eta()),mu,npv,DefaultMuRef,DefaultNPVRef,jetMuTerm.at(r),jetNPVTerm.at(r),jetAbsEtaBinsAxis.at(r));
	      JetPileupCorrection(area_pt,area_eta,area_phi,area_e,area_m,jet_calo,useOriginCorrection ? jet_orig : jet_calo,a->at(j),jetrho[r]->at(j),residualoffset,true);
	      AreaResidualL.at(Rhos.size()+r)->pt.push_back(area_pt);
	      AreaResidualL.at(Rhos.size()+r)->eta.push_back(area_eta);
	      AreaResidualL.at(Rhos.size()+r)->phi.push_back(area_phi);
	      AreaResidualL.at(Rhos.size()+r)->e.push_back(area_e);
	      AreaResidualL.at(Rhos.size()+r)->m.push_back(jet_area.M());
	      
	      if(TruePt!="") AreaResidualL.at(Rhos.size()+r)->tpt.push_back(tpt->at(j));
	      if(TrueEta!="") AreaResidualL.at(Rhos.size()+r)->teta.push_back(teta->at(j));
	      if(TruePhi!="") AreaResidualL.at(Rhos.size()+r)->tphi.push_back(tphi->at(j));
	      if(TrueE!="") AreaResidualL.at(Rhos.size()+r)->te.push_back(te->at(j));
	      if(TrueM!="") AreaResidualL.at(Rhos.size()+r)->tm.push_back(tm->at(j));
	      if(EventWeight!="") AreaResidualL.at(Rhos.size()+r)->EW = w;
	      
	    }
	    if(doAreaResidualConst){//add rho
	      float area_pt, area_eta, area_phi, area_e, area_m;
	      float residualoffset = GetResidualOffset(useOriginCorrection ? fabs(jet_orig.Eta()) : fabs(jet_calo.Eta()),mu,npv,DefaultMuRef,DefaultNPVRef,jetMuTerm.at(r),jetNPVTerm.at(r),jetAbsEtaBinsAxis.at(r));
	      float constoffset = GetConstOffset(useOriginCorrection ? fabs(jet_orig.Eta()) : fabs(jet_calo.Eta()),jetConstTerm.at(r),jetConstTermAbsEtaBinsAxis.at(r));
	      JetPileupCorrection(area_pt,area_eta,area_phi,area_e,area_m,jet_calo,useOriginCorrection ? jet_orig : jet_calo,a->at(j),jetrho[r]->at(j),residualoffset+constoffset,true);
	      AreaResidualConstL.at(Rhos.size()+r)->pt.push_back(area_pt);
	      AreaResidualConstL.at(Rhos.size()+r)->eta.push_back(area_eta);
	      AreaResidualConstL.at(Rhos.size()+r)->phi.push_back(area_phi);
	      AreaResidualConstL.at(Rhos.size()+r)->e.push_back(area_e);
	      AreaResidualConstL.at(Rhos.size()+r)->m.push_back(jet_area.M());
	      
	      if(TruePt!="") AreaResidualConstL.at(Rhos.size()+r)->tpt.push_back(tpt->at(j));
	      if(TrueEta!="") AreaResidualConstL.at(Rhos.size()+r)->teta.push_back(teta->at(j));
	      if(TruePhi!="") AreaResidualConstL.at(Rhos.size()+r)->tphi.push_back(tphi->at(j));
	      if(TrueE!="") AreaResidualConstL.at(Rhos.size()+r)->te.push_back(te->at(j));
	      if(TrueM!="") AreaResidualConstL.at(Rhos.size()+r)->tm.push_back(tm->at(j));
	      if(EventWeight!="") AreaResidualConstL.at(Rhos.size()+r)->EW = w;
	  
	    }
	  }
	}
	if(doUncalibrated){UncalibratedL->tree()->Fill(); UncalibratedL->clear();}
	for(int r = 0 ; r < Rhos.size()+JetRhos.size(); ++r){
	  if(doArea){AreaL.at(r)->tree()->Fill(); AreaL.at(r)->clear();}
	  if(doAreaResidual){AreaResidualL.at(r)->tree()->Fill(); AreaResidualL.at(r)->clear();}
	  if(doAreaResidualConst){AreaResidualConstL.at(r)->tree()->Fill(); AreaResidualConstL.at(r)->clear();}
	  if(doAreaResidualJES){AreaResidualJESL.at(r)->tree()->Fill(); AreaResidualJESL.at(r)->clear();}
	}
	event->Fill();
      }
      if(doUncalibrated) UncalibratedL->tree()->Write();
      for(int r = 0 ; r < Rhos.size()+JetRhos.size(); ++r){
	if(doArea) AreaL.at(r)->tree()->Write();
	if(doAreaResidual) AreaResidualL.at(r)->tree()->Write();
	if(doAreaResidualConst) AreaResidualConstL.at(r)->tree()->Write();
	if(doAreaResidualJES) AreaResidualJESL.at(r)->tree()->Write();
      }
      
      event->Write();
      //
    
      
    }
    
    OutputFileF->Close();
    InputFileF->Close();
    
    delete residualE;
  }
}
