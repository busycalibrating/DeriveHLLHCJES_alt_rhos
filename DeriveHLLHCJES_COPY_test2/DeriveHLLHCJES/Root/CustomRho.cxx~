//Steve Alkire
//17.05.2016

#include <vector>
#include <math.h>

#include "DeriveHLLHCJES/CustomRho.h"

#define GEV .001
typedef vector<fastjet::PseudoJet> JetV

ClassImp(CustomRho)

///////////////////////////////////////////////////////////////////////////
//
// Sorting Algorithms
//
//////////

int partition(vector<double>& A, int left, int right, int pivot) {
  cout << " >>partitioning" <<endl;
  for (int i=left; i<right; ++i) {
    if (A[i] <= pivot) {
      swap(A[i], A[left]);
      left ++;
    }
  }
  return left - 1;
}

void qsort(vector<double>& A, int left, int right) {
  if (left >= right) return;
  int middle = left + (right - left) / 2;
  swap(A[middle], A[left]);
  int midpoint = partition(A, left + 1, right, A[left]);
  swap(A[left], A[midpoint]);
  qsort(A, left, midpoint);
  qsort(A, midpoint + 1, right);
}

///////////////////////////////////////////////////////////////////////////
//
// Rho Tower Grid (using Tower Cells)
//
//////////

float CustomRho :: Grid(const xAOD::CaloTowerContainer* towers, float etalow, float etahigh, float r, float &sigma = defaultsigma){
  fastjet::MyGridMedianBackgroundEstimator gmbe1 = fastjet::MyGridMedianBackgroundEstimator(etalow,etahigh,r);

  std::vector<fastjet::PseudoJet> clusterPJs;

  for(int c = 0; c < towers->size(); ++c ){
    TLorentzVector tc;
    tc.SetPtEtaPhiE(towers->at(c)->pt(),towers->at(c)->eta(),towers->at(c)->phi(),towers->at(c)->e());
    if(tc.Pt() * GEV < 0 || tc.E() * GEV < 0) continue;
    fastjet::PseudoJet PJ(tc.Px()*GEV,tc.Py()*GEV,tc.Pz()*GEV,tc.E()*GEV);
    clusterPJs.push_back(PJ);
  }

  gmbe1.set_particles(clusterPJs);
  sigma = gmbe1.sigma();
  return gmbe1.rho();
}

///////////////////////////////////////////////////////////////////////////
//
// Rho Grid (using CaloCalTopoClusters)
//
//////////

float CustomRho :: Grid(const xAOD::CaloClusterContainer* clusters, float etalow, float etahigh, float r, float &sigma = defaultsigma){
  fastjet::MyGridMedianBackgroundEstimator gmbe1 = fastjet::MyGridMedianBackgroundEstimator(etalow,etahigh,r);

  std::vector<fastjet::PseudoJet> clusterPJs;

  for(int c = 0; c < clusters->size(); ++c ){
    if((clusters->at(c)->p4(CaloClusterState)).Pt() * GEV < 0 || (clusters->at(c)->p4(CaloClusterState)).E() * GEV < 0) continue;

    fastjet::PseudoJet PJ((clusters->at(c)->p4(CaloClusterState)).Px()*GEV,(clusters->at(c)->p4(CaloClusterState)).Py()*GEV,(clusters->at(c)->p4(CaloClusterState)).Pz()*GEV,(clusters->at(c)->p4(CaloClusterState)).E()*GEV);
    clusterPJs.push_back(PJ);
  }
  gmbe1.set_particles(clusterPJs);
  sigma = gmbe1.sigma();
  return gmbe1.rho();
}

///////////////////////////////////////////////////////////////////////////
//
// Rho Circle
//
//////////

//float CustomRho :: CircleDomain(JetV* jets, double m_Strip_DeltaMax, double jet_R){
//  float circle_rho;
//
//  return circle_rho;
//}
//
/////////////////////////////////////////////////////////////////////////////
////
//// GET MEDIAN
////
////////////
//
//double CustomRho :: median(vector<double> pt_area_ratio){
//  double median;
//  return median;
//}

